anon.enum:
  raw_text = enum {
  ITEM_ONE = 0,
  ITEM_TWO,
  ITEM_THREE
}
  text = enum {
  ITEM_ONE = 0,
  ITEM_TWO,
  ITEM_THREE
}
  inner_text: 
  ITEM_ONE = 0,
  ITEM_TWO,
  ITEM_THREE


anon.struct:
  raw_text = struct{
    int value;
  }
  text = struct{
    int value;
  }
  inner_text: 
    int value;
  


anon.struct:
  raw_text = struct {
        uint8 param;
      }
  text = struct {
        uint8 param;
      }
  inner_text: 
        uint8 param;
      


inner_inner_inst.struct:
  raw_text = struct inner_inner_inst {
      char inner_val;
      struct {
        uint8 param;
      } deep;
    }
  text = struct inner_inner_inst {
      char inner_val;
      1 deep;
    }
  inner_text: 
      char inner_val;
      1 deep;
    


inner_struct.struct:
  raw_text = struct inner_struct{
    struct inner_inner_inst {
      char inner_val;
      struct {
        uint8 param;
      } deep;
    };
    inner_inner_inst val;
  }
  text = struct inner_struct{
    
    inner_inner_inst val;
  }
  inner_text: 
    
    inner_inner_inst val;
  


anon.struct:
  raw_text = struct {
    char a;
    char b;
  }
  text = struct {
    char a;
    char b;
  }
  inner_text: 
    char a;
    char b;
  


empty.struct:
  raw_text = struct empty {}
  text = struct empty {}
  inner_text: 


test_struct.struct:
  raw_text = struct test_struct {

  exceptions: no;

  struct{
    int value;
  } m;


  float stuff;
  struct inner_struct{
    struct inner_inner_inst {
      char inner_val;
      struct {
        uint8 param;
      } deep;
    };
    inner_inner_inst val;
  };
  inner_struct def;

  struct {
    char a;
    char b;
  } d, r;

  struct empty {} emptydef;
}
  text = struct test_struct {

  exceptions: no;

  1 m;


  float stuff;
  
  inner_struct def;

  2 d, r;

  empty emptydef;
}
  inner_text: 

  exceptions: no;

  1 m;


  float stuff;
  
  inner_struct def;

  2 d, r;

  empty emptydef;


TestClass.class:
  raw_text = class TestClass {
public:
}
  text = class TestClass {
public:
}
  inner_text: 
public:


Service.resource:
  raw_text = resource Service {
  allow_exceptions = true;
  void method(int param1, float param2);
}
  text = resource Service {
  allow_exceptions = true;
  void method(int param1, float param2);
}
  inner_text: 
  allow_exceptions = true;
  void method(int param1, float param2);


global.global:
  raw_text = 
tab_size = 2;

enum {
  ITEM_ONE = 0,
  ITEM_TWO,
  ITEM_THREE
}

struct test_struct {

  exceptions: no;

  struct{
    int value;
  } m;


  float stuff;
  struct inner_struct{
    struct inner_inner_inst {
      char inner_val;
      struct {
        uint8 param;
      } deep;
    };
    inner_inner_inst val;
  };
  inner_struct def;

  struct {
    char a;
    char b;
  } d, r;

  struct empty {} emptydef;
};

class TestClass {
public:
};

resource Service {
  allow_exceptions = true;
  void method(int param1, float param2);
}

  text = 
tab_size = 2;

1





resource Service {
  allow_exceptions = true;
  void method(int param1, float param2);
}

  inner_text: 
  allow_exceptions = true;
  void method(int param1, float param2);


global$1.enum
global$test_struct$1.struct
global$test_struct$inner_struct$inner_inner_inst$1.struct
global$test_struct$inner_struct$inner_inner_inst.struct
global$test_struct$inner_struct.struct
global$test_struct$2.struct
global$test_struct$empty.struct
global$test_struct.struct
global$TestClass.class
global$Service.resource
global.global
members:
 ["allow_exceptions", "=", "true"]
 ["void", "method", [:paren, ["int", "param1,", "float", "param2"]]]

