#
# Copyright (c) 2015, Robert Glissmann
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

require 'open3'

RPC_GENERATOR_NAME = 'protoc-gen-coralrpc'
rpc_generator_path = File.expand_path( "./#{RPC_GENERATOR_NAME}" )

proto_dir = 'proto/'
gen_stage = 'test_out/'

task :generate do
  command = "protoc "
  command << "--plugin=#{RPC_GENERATOR_NAME}=#{rpc_generator_path} "
  command << "--proto_path=#{proto_dir} "
  command << "--cpp_out=#{gen_stage} "
  command << "--libergen_out=#{gen_stage} "
  command << "#{proto_dir}*.proto"
  stdout_str, status = Open3.capture2(command)
  puts stdout_str
end

task :situate do
  Dir.glob(File.join(gen_stage, '*.{h,cpp,cc}')) do |filename|

    filename = File.basename(filename)

    file_type = nil
    case File.extname(filename)
    when '.h'
      file_type = 'rpc_include'
    when /\.(cc|cpp)/
      file_type = 'rpc_source'
    else
      puts "Unknown file extension: #{File.extname(filename)}"
    end

    destination = ''
    if filename.include? 'ClientStub'
      destination << File.join('client', file_type)
    elsif filename.include? 'ServerStub' or filename.include? 'Wrapper'
      destination << File.join('server', file_type)
    elsif filename.include? '.pb.h'
      destination << File.join('common', file_type)
    elsif filename.include? '.pb.cc'
      destination << File.join('common', file_type)
    end

    unless destination.empty?
      source = File.join(gen_stage, filename)
      FileUtils.mv(source, destination)
    end
  end
end

