#
# Copyright (c) 2015, Robert Glissmann
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

require 'open3'

#
# Update the following constant to point to the directory where your .proto
# files are located.
#

RPC_GENERATOR_NAME = 'protoc-gen-coralrpc'
RPC_GEN_ENV_VAR    = 'CORALRPC_GEN_ROOT'

# Build the full path to the generator plugin.
def get_protoc_plugin_path()
  if ENV::has_key?( RPC_GEN_ENV_VAR )
    rpc_generator_path = File.join( ENV[ RPC_GEN_ENV_VAR ], RPC_GENERATOR_NAME )

    # Check that the plugin executable exists.
    unless File.exist?( rpc_generator_path ) && File.executable?( rpc_generator_path )
      raise "ERROR: Coral RPC service generator plugin not built"
    end
  else
    raise "ERROR: CORALRPC_GEN_ROOT environment variable not set"
  end

  rpc_generator_path
end

# RPC project configurations singleton
class RpcGenConfigs
  RPC_PROJECT_CONFIG_FILE = 'rpc_gen_project_settings.txt'
  @@instance = nil
  attr_accessor :attrs
  def initialize
    restore_defaults
  end
  def restore_defaults
    @attrs = {
      proto_root_path:         'proto',
      service_gen_root_path:   'rpc_gen_temp',
      message_gen_root_path:   'rpc_gen_temp',
      client_service_header_out_path: File.join( 'client', 'rpc_include'),
      client_service_source_out_path: File.join( 'client', 'rpc_source'),
      server_service_header_out_path: File.join( 'server', 'rpc_include'),
      server_service_source_out_path: File.join( 'server', 'rpc_source'),
      message_header_out_path: File.join( 'common', 'rpc_include' ),
      message_source_out_path: File.join( 'common', 'rpc_source' ),
    }
  end
  def self.instance
    @@instance = RpcGenConfigs.new unless @@instance
    @@instance
  end
  def self.[]=(key,value)
    if instance.attrs.keys.include? key
      raise "ERROR: No value specified for #{key.to_s}" if value.nil?

      if File.exist?( value ) == false
        raise "ERROR: Path #{instance.attrs[ key ]} does not exist."
      elsif File.directory?( value ) == false
        raise "ERROR: Path #{instance.attrs[ key ]} must specify a directory."
      end

      instance.attrs[key] = value
    end
  end
  def self.[](key)
    instance.attrs[key]
  end
  def self.load
    if File.exist? RPC_PROJECT_CONFIG_FILE
      File.open( RPC_PROJECT_CONFIG_FILE, 'r' ) do |io|
        io.readlines.each do |line|
          key_value_pair = line.scan(/(\w+)\s*=\s*([^\n]+)/).first
          next unless key_value_pair
          
          key, value = key_value_pair

          key = key.downcase.to_sym
          if instance.attrs.keys.include? key
            instance.attrs[ key ] = value
          end
        end
      end
    else
      instance.restore_defaults
    end
  end
  def self.save
    File.open( RPC_PROJECT_CONFIG_FILE, 'w+' ) do |io|
      instance.attrs.each do |key,value|
        io.puts "#{key.to_s.upcase}=#{value}"
      end
    end
  end
end


proto_dir = 'proto/'
gen_stage = 'rpc_gen_temp/'

task :set_proto_root, :proto_root_path do |t, args|
  RpcGenConfigs::load
  RpcGenConfigs[ :proto_root_path ] = args[ :proto_root_path ]
  RpcGenConfigs::save
end

task :set_service_gen_root_path, :service_gen_root_path do |t, args|
  RpcGenConfigs::load
  RpcGenConfigs[ :service_gen_root_path ] = args[ :service_gen_root_path ]
  RpcGenConfigs::save
end

task :set_message_gen_root_path, :message_gen_root_path do |t, args|
  RpcGenConfigs::load
  RpcGenConfigs[ :message_gen_root_path ] = args[ :message_gen_root_path ]
  RpcGenConfigs::save
end

task :set_client_service_header_out_path, :client_service_header_out_path do |t, args|
  RpcGenConfigs::load
  RpcGenConfigs[ :client_service_header_out_path ] = args[ :client_service_header_out_path ]
  RpcGenConfigs::save
end

task :set_client_service_source_out_path, :client_service_source_out_path do |t, args|
  RpcGenConfigs::load
  RpcGenConfigs[ :client_service_source_out_path ] = args[ :client_service_source_out_path ]
  RpcGenConfigs::save
end

task :set_server_service_header_out_path, :server_service_header_out_path do |t, args|
  RpcGenConfigs::load
  RpcGenConfigs[ :server_service_header_out_path ] = args[ :server_service_header_out_path ]
  RpcGenConfigs::save
end

task :set_server_service_source_out_path, :server_service_source_out_path do |t, args|
  RpcGenConfigs::load
  RpcGenConfigs[ :server_service_source_out_path ] = args[ :server_service_source_out_path ]
  RpcGenConfigs::save
end

task :set_message_header_out_path, :message_header_out_path do |t, args|
  RpcGenConfigs::load
  RpcGenConfigs[ :message_header_out_path ] = args[ :message_header_out_path ]
  RpcGenConfigs::save
end

task :set_message_source_path, :message_source_path do |t, args|
  RpcGenConfigs::load
  RpcGenConfigs[ :message_source_path ] = args[ :message_source_path ]
  RpcGenConfigs::save
end



task :generate do
  rpc_generator_path = get_protoc_plugin_path
  RpcGenConfigs::load

  command = "protoc "
  command << "--plugin=#{RPC_GENERATOR_NAME}=#{rpc_generator_path} "
  command << "--proto_path=#{RpcGenConfigs[ :proto_root_path ]} "
  command << "--cpp_out=#{RpcGenConfigs[ :message_gen_root_path ]} "
  command << "--coralrpc_out=#{RpcGenConfigs[ :service_gen_root_path ]} "
  command << "#{File.join(RpcGenConfigs[ :proto_root_path ],'*')}.proto"

  stdout_stderr, status = Open3.capture2e( command )
  if stdout_stderr && !stdout_stderr.empty?
    puts stdout_stderr
  end
end


task :situate do

  RpcGenConfigs::load

  Dir.glob( File.join( RpcGenConfigs[ :message_gen_root_path ], '*.pb.h' )) do |source_filename|
    dest_filename = File.join(
      RpcGenConfigs[ :message_header_out_path ],
      File.basename( source_filename )
    )
    puts "Moving #{source_filename} to #{dest_filename}..."
    FileUtils.mv( source_filename, dest_filename )
  end
  Dir.glob( File.join( RpcGenConfigs[ :message_gen_root_path ], '*.pb.cc' )) do |source_filename|
    dest_filename = File.join(
      RpcGenConfigs[ :message_source_out_path ],
      File.basename( source_filename )
    )
    puts "Moving #{source_filename} to #{dest_filename}..."
    FileUtils.mv( source_filename, dest_filename )
  end

  Dir.glob( File.join( RpcGenConfigs[ :service_gen_root_path ], '*ClientStub*.{h,cpp}' ) ) do |source_filename|
    if File.extname( source_filename ) == '.h'
      dest_filename = File.join(
        RpcGenConfigs[ :client_service_header_out_path ],
        File.basename( source_filename )
      )
    else
      dest_filename = File.join(
        RpcGenConfigs[ :client_service_source_out_path ],
        File.basename( source_filename )
      )
    end
    puts "Moving #{source_filename} to #{dest_filename}..."
    FileUtils.mv( source_filename, dest_filename )
  end

  Dir.glob( File.join( RpcGenConfigs[ :service_gen_root_path ], '*ServerStub*.{h,cpp}' ) ) do |source_filename|
    if File.extname( source_filename ) == '.h'
      dest_filename = File.join(
        RpcGenConfigs[ :server_service_header_out_path ],
        File.basename( source_filename )
      )
    else
      dest_filename = File.join(
        RpcGenConfigs[ :server_service_source_out_path],
        File.basename( source_filename )
      )
    end
    puts "Moving #{source_filename} to #{dest_filename}..."
    FileUtils.mv( source_filename, dest_filename )
  end

  Dir.glob( File.join( RpcGenConfigs[ :service_gen_root_path ], '*Action.{h,cpp}' ) ) do |source_filename|
    if File.extname( source_filename ) == '.h'
      dest_filename = File.join(
        RpcGenConfigs[ :server_service_header_out_path ],
        File.basename( source_filename )
      )
    else
      dest_filename = File.join(
        RpcGenConfigs[ :server_service_source_out_path ],
        File.basename( source_filename )
      )
    end
    puts "Moving #{source_filename} to #{dest_filename}..."
    FileUtils.mv( source_filename, dest_filename )
  end
end

task :help do

help_text = %q(
This Rakefile contains utility tasks that may be useful when building
coral::rpc based RPC services.  The tasks provided by this Rakefile are as
follows:

  generate:

    The protoc command can be rather tedious to type repeatedly, so this
    task issues the command for you.  For this task to work, you must
    first set the CORALRPC_GEN_ROOT environment variable to point to
    utils/rpc_generate.  Additionally, your *.proto definition files are
    assumed to be in a directory called "proto" at the same level as this
    directory (configurable via the "set_proto_root" task).  Protobuf
    message definitions are written to a directory called "rpc_gen_temp"
    (configurable via the "set_message_gen_root_path" task) at the same
    level as this Rakfile .  Finally, generated service code is written to
    a directory called "rpc_gen_temp" (configurable via the
    "set_message_gen_root_path" task) at the same level as this Rakfile.
    Note: The generate task processes all .proto files in the configured
    proto_root directory.


  situate:

    Move generated source out of the temporary directory to its final location.
    - Protobuf definition headers are moved to common/rpc_include
      (configurable via the "set_message_header_out_path" task).
    - Protobuf source files are moved to common/rpc_source
      (configurable via the "set_message_source_out_path" task).
    - Client service headers are moved to client/rpc_include
      (configurable via the "set_client_service_header_out_path" task).
    - Client service source files are moved to client/rpc_source
      (configurable via the "set_client_service_source_out_path" task).
    - Server service headers are moved to server/rpc_include
      (configurable via the "set_server_service_header_out_path" task).
    - Server service source files are moved to server/rpc_source
      (configurable via the "set_server_service_source_out_path" task).


  set_proto_root:

    Configure the path the .proto definition files in your project.
    Defaults to ./proto/.
    This setting persists in rpc_gen_project_settings.txt.


  set_message_gen_root_path:

    Configure the temporary output directory for generated Protobuf code.
    Defaults to ./rpc_gen_temp/.
    This setting persists in rpc_gen_project_settings.txt.


  set_service_gen_root_path:

    Configure the temporary output directory for generated coral::rpc
    service code.
    Defaults to ./rpc_gen_temp/.
    This setting persists in rpc_gen_project_settings.txt.


  set_message_header_out_path:

    Configure the final location for Protobuf message header files.
    Defaults to ./common/rpc_include/.
    This setting persists in rpc_gen_project_settings.txt.


  set_message_source_out_path:

    Configure the final location for Protobuf message source files.
    Defaults to ./common/rpc_source/.
    This setting persists in rpc_gen_project_settings.txt.


  set_client_service_header_out_path:

    Configure the final location for coral::rpc service client header files.
    Defaults to ./client/rpc_include/.
    This setting persists in rpc_gen_project_settings.txt.


  set_client_service_source_out_path:

    Configure the final location for coral::rpc service client source files.
    Defaults to ./client/rpc_source/.
    This setting persists in rpc_gen_project_settings.txt.


  set_server_service_header_out_path:

    Configure the final location for coral::rpc service server header files.
    Defaults to ./server/rpc_include/.
    This setting persists in rpc_gen_project_settings.txt.


  set_server_service_source_out_path:

    Configure the final location for coral::rpc service server source files.
    Defaults to ./server/rpc_source/.
    This setting persists in rpc_gen_project_settings.txt.

)

  puts help_text
end

