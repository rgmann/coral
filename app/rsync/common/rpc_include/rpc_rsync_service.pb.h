// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc_rsync_service.proto

#ifndef PROTOBUF_rpc_5frsync_5fservice_2eproto__INCLUDED
#define PROTOBUF_rpc_5frsync_5fservice_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace rpc_rsync_service {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rpc_5frsync_5fservice_2eproto();
void protobuf_AssignDesc_rpc_5frsync_5fservice_2eproto();
void protobuf_ShutdownFile_rpc_5frsync_5fservice_2eproto();

class EmptyParams;
class FileQuery;
class FileQueryResponse;
class JobStart;
class JobStartResponse;

// ===================================================================

class EmptyParams : public ::google::protobuf::Message {
 public:
  EmptyParams();
  virtual ~EmptyParams();

  EmptyParams(const EmptyParams& from);

  inline EmptyParams& operator=(const EmptyParams& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EmptyParams& default_instance();

  void Swap(EmptyParams* other);

  // implements Message ----------------------------------------------

  EmptyParams* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EmptyParams& from);
  void MergeFrom(const EmptyParams& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:rpc_rsync_service.EmptyParams)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_rpc_5frsync_5fservice_2eproto();
  friend void protobuf_AssignDesc_rpc_5frsync_5fservice_2eproto();
  friend void protobuf_ShutdownFile_rpc_5frsync_5fservice_2eproto();

  void InitAsDefaultInstance();
  static EmptyParams* default_instance_;
};
// -------------------------------------------------------------------

class FileQuery : public ::google::protobuf::Message {
 public:
  FileQuery();
  virtual ~FileQuery();

  FileQuery(const FileQuery& from);

  inline FileQuery& operator=(const FileQuery& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FileQuery& default_instance();

  void Swap(FileQuery* other);

  // implements Message ----------------------------------------------

  FileQuery* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FileQuery& from);
  void MergeFrom(const FileQuery& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string path = 1;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 1;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  inline void set_allocated_path(::std::string* path);

  // @@protoc_insertion_point(class_scope:rpc_rsync_service.FileQuery)
 private:
  inline void set_has_path();
  inline void clear_has_path();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* path_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_rpc_5frsync_5fservice_2eproto();
  friend void protobuf_AssignDesc_rpc_5frsync_5fservice_2eproto();
  friend void protobuf_ShutdownFile_rpc_5frsync_5fservice_2eproto();

  void InitAsDefaultInstance();
  static FileQuery* default_instance_;
};
// -------------------------------------------------------------------

class FileQueryResponse : public ::google::protobuf::Message {
 public:
  FileQueryResponse();
  virtual ~FileQueryResponse();

  FileQueryResponse(const FileQueryResponse& from);

  inline FileQueryResponse& operator=(const FileQueryResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FileQueryResponse& default_instance();

  void Swap(FileQueryResponse* other);

  // implements Message ----------------------------------------------

  FileQueryResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FileQueryResponse& from);
  void MergeFrom(const FileQueryResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool file_found = 1;
  inline bool has_file_found() const;
  inline void clear_file_found();
  static const int kFileFoundFieldNumber = 1;
  inline bool file_found() const;
  inline void set_file_found(bool value);

  // optional uint32 file_size = 2;
  inline bool has_file_size() const;
  inline void clear_file_size();
  static const int kFileSizeFieldNumber = 2;
  inline ::google::protobuf::uint32 file_size() const;
  inline void set_file_size(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:rpc_rsync_service.FileQueryResponse)
 private:
  inline void set_has_file_found();
  inline void clear_has_file_found();
  inline void set_has_file_size();
  inline void clear_has_file_size();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool file_found_;
  ::google::protobuf::uint32 file_size_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_rpc_5frsync_5fservice_2eproto();
  friend void protobuf_AssignDesc_rpc_5frsync_5fservice_2eproto();
  friend void protobuf_ShutdownFile_rpc_5frsync_5fservice_2eproto();

  void InitAsDefaultInstance();
  static FileQueryResponse* default_instance_;
};
// -------------------------------------------------------------------

class JobStart : public ::google::protobuf::Message {
 public:
  JobStart();
  virtual ~JobStart();

  JobStart(const JobStart& from);

  inline JobStart& operator=(const JobStart& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JobStart& default_instance();

  void Swap(JobStart* other);

  // implements Message ----------------------------------------------

  JobStart* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JobStart& from);
  void MergeFrom(const JobStart& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string path = 1;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 1;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  inline void set_allocated_path(::std::string* path);

  // @@protoc_insertion_point(class_scope:rpc_rsync_service.JobStart)
 private:
  inline void set_has_path();
  inline void clear_has_path();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* path_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_rpc_5frsync_5fservice_2eproto();
  friend void protobuf_AssignDesc_rpc_5frsync_5fservice_2eproto();
  friend void protobuf_ShutdownFile_rpc_5frsync_5fservice_2eproto();

  void InitAsDefaultInstance();
  static JobStart* default_instance_;
};
// -------------------------------------------------------------------

class JobStartResponse : public ::google::protobuf::Message {
 public:
  JobStartResponse();
  virtual ~JobStartResponse();

  JobStartResponse(const JobStartResponse& from);

  inline JobStartResponse& operator=(const JobStartResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JobStartResponse& default_instance();

  void Swap(JobStartResponse* other);

  // implements Message ----------------------------------------------

  JobStartResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JobStartResponse& from);
  void MergeFrom(const JobStartResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool file_found = 1;
  inline bool has_file_found() const;
  inline void clear_file_found();
  static const int kFileFoundFieldNumber = 1;
  inline bool file_found() const;
  inline void set_file_found(bool value);

  // optional uint32 file_size = 2;
  inline bool has_file_size() const;
  inline void clear_file_size();
  static const int kFileSizeFieldNumber = 2;
  inline ::google::protobuf::uint32 file_size() const;
  inline void set_file_size(::google::protobuf::uint32 value);

  // optional int32 job_id = 3;
  inline bool has_job_id() const;
  inline void clear_job_id();
  static const int kJobIdFieldNumber = 3;
  inline ::google::protobuf::int32 job_id() const;
  inline void set_job_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:rpc_rsync_service.JobStartResponse)
 private:
  inline void set_has_file_found();
  inline void clear_has_file_found();
  inline void set_has_file_size();
  inline void clear_has_file_size();
  inline void set_has_job_id();
  inline void clear_has_job_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool file_found_;
  ::google::protobuf::uint32 file_size_;
  ::google::protobuf::int32 job_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_rpc_5frsync_5fservice_2eproto();
  friend void protobuf_AssignDesc_rpc_5frsync_5fservice_2eproto();
  friend void protobuf_ShutdownFile_rpc_5frsync_5fservice_2eproto();

  void InitAsDefaultInstance();
  static JobStartResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// EmptyParams

// -------------------------------------------------------------------

// FileQuery

// optional string path = 1;
inline bool FileQuery::has_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FileQuery::set_has_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FileQuery::clear_has_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FileQuery::clear_path() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& FileQuery::path() const {
  return *path_;
}
inline void FileQuery::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void FileQuery::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void FileQuery::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FileQuery::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  return path_;
}
inline ::std::string* FileQuery::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FileQuery::set_allocated_path(::std::string* path) {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (path) {
    set_has_path();
    path_ = path;
  } else {
    clear_has_path();
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// FileQueryResponse

// optional bool file_found = 1;
inline bool FileQueryResponse::has_file_found() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FileQueryResponse::set_has_file_found() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FileQueryResponse::clear_has_file_found() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FileQueryResponse::clear_file_found() {
  file_found_ = false;
  clear_has_file_found();
}
inline bool FileQueryResponse::file_found() const {
  return file_found_;
}
inline void FileQueryResponse::set_file_found(bool value) {
  set_has_file_found();
  file_found_ = value;
}

// optional uint32 file_size = 2;
inline bool FileQueryResponse::has_file_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FileQueryResponse::set_has_file_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FileQueryResponse::clear_has_file_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FileQueryResponse::clear_file_size() {
  file_size_ = 0u;
  clear_has_file_size();
}
inline ::google::protobuf::uint32 FileQueryResponse::file_size() const {
  return file_size_;
}
inline void FileQueryResponse::set_file_size(::google::protobuf::uint32 value) {
  set_has_file_size();
  file_size_ = value;
}

// -------------------------------------------------------------------

// JobStart

// optional string path = 1;
inline bool JobStart::has_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JobStart::set_has_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JobStart::clear_has_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JobStart::clear_path() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& JobStart::path() const {
  return *path_;
}
inline void JobStart::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void JobStart::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void JobStart::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JobStart::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  return path_;
}
inline ::std::string* JobStart::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JobStart::set_allocated_path(::std::string* path) {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (path) {
    set_has_path();
    path_ = path;
  } else {
    clear_has_path();
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// JobStartResponse

// optional bool file_found = 1;
inline bool JobStartResponse::has_file_found() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JobStartResponse::set_has_file_found() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JobStartResponse::clear_has_file_found() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JobStartResponse::clear_file_found() {
  file_found_ = false;
  clear_has_file_found();
}
inline bool JobStartResponse::file_found() const {
  return file_found_;
}
inline void JobStartResponse::set_file_found(bool value) {
  set_has_file_found();
  file_found_ = value;
}

// optional uint32 file_size = 2;
inline bool JobStartResponse::has_file_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JobStartResponse::set_has_file_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JobStartResponse::clear_has_file_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JobStartResponse::clear_file_size() {
  file_size_ = 0u;
  clear_has_file_size();
}
inline ::google::protobuf::uint32 JobStartResponse::file_size() const {
  return file_size_;
}
inline void JobStartResponse::set_file_size(::google::protobuf::uint32 value) {
  set_has_file_size();
  file_size_ = value;
}

// optional int32 job_id = 3;
inline bool JobStartResponse::has_job_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JobStartResponse::set_has_job_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JobStartResponse::clear_has_job_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JobStartResponse::clear_job_id() {
  job_id_ = 0;
  clear_has_job_id();
}
inline ::google::protobuf::int32 JobStartResponse::job_id() const {
  return job_id_;
}
inline void JobStartResponse::set_job_id(::google::protobuf::int32 value) {
  set_has_job_id();
  job_id_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc_rsync_service

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rpc_5frsync_5fservice_2eproto__INCLUDED
