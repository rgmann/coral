// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc_rsync_service.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rpc_rsync_service.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rpc_rsync_service {

namespace {

const ::google::protobuf::Descriptor* EmptyParams_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EmptyParams_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileQuery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileQuery_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileQueryResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileQueryResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* JobStart_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JobStart_reflection_ = NULL;
const ::google::protobuf::Descriptor* JobStartResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JobStartResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rpc_5frsync_5fservice_2eproto() {
  protobuf_AddDesc_rpc_5frsync_5fservice_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rpc_rsync_service.proto");
  GOOGLE_CHECK(file != NULL);
  EmptyParams_descriptor_ = file->message_type(0);
  static const int EmptyParams_offsets_[1] = {
  };
  EmptyParams_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EmptyParams_descriptor_,
      EmptyParams::default_instance_,
      EmptyParams_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmptyParams, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmptyParams, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EmptyParams));
  FileQuery_descriptor_ = file->message_type(1);
  static const int FileQuery_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileQuery, path_),
  };
  FileQuery_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileQuery_descriptor_,
      FileQuery::default_instance_,
      FileQuery_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileQuery, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileQuery, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileQuery));
  FileQueryResponse_descriptor_ = file->message_type(2);
  static const int FileQueryResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileQueryResponse, file_found_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileQueryResponse, file_size_),
  };
  FileQueryResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileQueryResponse_descriptor_,
      FileQueryResponse::default_instance_,
      FileQueryResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileQueryResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileQueryResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileQueryResponse));
  JobStart_descriptor_ = file->message_type(3);
  static const int JobStart_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobStart, path_),
  };
  JobStart_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JobStart_descriptor_,
      JobStart::default_instance_,
      JobStart_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobStart, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobStart, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JobStart));
  JobStartResponse_descriptor_ = file->message_type(4);
  static const int JobStartResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobStartResponse, file_found_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobStartResponse, file_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobStartResponse, job_id_),
  };
  JobStartResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JobStartResponse_descriptor_,
      JobStartResponse::default_instance_,
      JobStartResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobStartResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobStartResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JobStartResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rpc_5frsync_5fservice_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EmptyParams_descriptor_, &EmptyParams::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileQuery_descriptor_, &FileQuery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileQueryResponse_descriptor_, &FileQueryResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JobStart_descriptor_, &JobStart::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JobStartResponse_descriptor_, &JobStartResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rpc_5frsync_5fservice_2eproto() {
  delete EmptyParams::default_instance_;
  delete EmptyParams_reflection_;
  delete FileQuery::default_instance_;
  delete FileQuery_reflection_;
  delete FileQueryResponse::default_instance_;
  delete FileQueryResponse_reflection_;
  delete JobStart::default_instance_;
  delete JobStart_reflection_;
  delete JobStartResponse::default_instance_;
  delete JobStartResponse_reflection_;
}

void protobuf_AddDesc_rpc_5frsync_5fservice_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027rpc_rsync_service.proto\022\021rpc_rsync_ser"
    "vice\"\r\n\013EmptyParams\"\031\n\tFileQuery\022\014\n\004path"
    "\030\001 \001(\t\":\n\021FileQueryResponse\022\022\n\nfile_foun"
    "d\030\001 \001(\010\022\021\n\tfile_size\030\002 \001(\r\"\030\n\010JobStart\022\014"
    "\n\004path\030\001 \001(\t\"I\n\020JobStartResponse\022\022\n\nfile"
    "_found\030\001 \001(\010\022\021\n\tfile_size\030\002 \001(\r\022\016\n\006job_i"
    "d\030\003 \001(\005", 247);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rpc_rsync_service.proto", &protobuf_RegisterTypes);
  EmptyParams::default_instance_ = new EmptyParams();
  FileQuery::default_instance_ = new FileQuery();
  FileQueryResponse::default_instance_ = new FileQueryResponse();
  JobStart::default_instance_ = new JobStart();
  JobStartResponse::default_instance_ = new JobStartResponse();
  EmptyParams::default_instance_->InitAsDefaultInstance();
  FileQuery::default_instance_->InitAsDefaultInstance();
  FileQueryResponse::default_instance_->InitAsDefaultInstance();
  JobStart::default_instance_->InitAsDefaultInstance();
  JobStartResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rpc_5frsync_5fservice_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rpc_5frsync_5fservice_2eproto {
  StaticDescriptorInitializer_rpc_5frsync_5fservice_2eproto() {
    protobuf_AddDesc_rpc_5frsync_5fservice_2eproto();
  }
} static_descriptor_initializer_rpc_5frsync_5fservice_2eproto_;

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

EmptyParams::EmptyParams()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EmptyParams::InitAsDefaultInstance() {
}

EmptyParams::EmptyParams(const EmptyParams& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EmptyParams::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EmptyParams::~EmptyParams() {
  SharedDtor();
}

void EmptyParams::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EmptyParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EmptyParams::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EmptyParams_descriptor_;
}

const EmptyParams& EmptyParams::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_5frsync_5fservice_2eproto();
  return *default_instance_;
}

EmptyParams* EmptyParams::default_instance_ = NULL;

EmptyParams* EmptyParams::New() const {
  return new EmptyParams;
}

void EmptyParams::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EmptyParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void EmptyParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EmptyParams::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EmptyParams::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EmptyParams::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EmptyParams* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EmptyParams*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EmptyParams::MergeFrom(const EmptyParams& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EmptyParams::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmptyParams::CopyFrom(const EmptyParams& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmptyParams::IsInitialized() const {

  return true;
}

void EmptyParams::Swap(EmptyParams* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EmptyParams::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EmptyParams_descriptor_;
  metadata.reflection = EmptyParams_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FileQuery::kPathFieldNumber;
#endif  // !_MSC_VER

FileQuery::FileQuery()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FileQuery::InitAsDefaultInstance() {
}

FileQuery::FileQuery(const FileQuery& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FileQuery::SharedCtor() {
  _cached_size_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileQuery::~FileQuery() {
  SharedDtor();
}

void FileQuery::SharedDtor() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void FileQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileQuery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileQuery_descriptor_;
}

const FileQuery& FileQuery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_5frsync_5fservice_2eproto();
  return *default_instance_;
}

FileQuery* FileQuery::default_instance_ = NULL;

FileQuery* FileQuery::New() const {
  return new FileQuery;
}

void FileQuery::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string path = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FileQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->path(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FileQuery::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FileQuery::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string path = 1;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileQuery::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileQuery* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileQuery*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileQuery::MergeFrom(const FileQuery& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_path(from.path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileQuery::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileQuery::CopyFrom(const FileQuery& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileQuery::IsInitialized() const {

  return true;
}

void FileQuery::Swap(FileQuery* other) {
  if (other != this) {
    std::swap(path_, other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileQuery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileQuery_descriptor_;
  metadata.reflection = FileQuery_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FileQueryResponse::kFileFoundFieldNumber;
const int FileQueryResponse::kFileSizeFieldNumber;
#endif  // !_MSC_VER

FileQueryResponse::FileQueryResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FileQueryResponse::InitAsDefaultInstance() {
}

FileQueryResponse::FileQueryResponse(const FileQueryResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FileQueryResponse::SharedCtor() {
  _cached_size_ = 0;
  file_found_ = false;
  file_size_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileQueryResponse::~FileQueryResponse() {
  SharedDtor();
}

void FileQueryResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FileQueryResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileQueryResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileQueryResponse_descriptor_;
}

const FileQueryResponse& FileQueryResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_5frsync_5fservice_2eproto();
  return *default_instance_;
}

FileQueryResponse* FileQueryResponse::default_instance_ = NULL;

FileQueryResponse* FileQueryResponse::New() const {
  return new FileQueryResponse;
}

void FileQueryResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    file_found_ = false;
    file_size_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileQueryResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool file_found = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &file_found_)));
          set_has_file_found();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_file_size;
        break;
      }

      // optional uint32 file_size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_file_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &file_size_)));
          set_has_file_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FileQueryResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool file_found = 1;
  if (has_file_found()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->file_found(), output);
  }

  // optional uint32 file_size = 2;
  if (has_file_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->file_size(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FileQueryResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool file_found = 1;
  if (has_file_found()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->file_found(), target);
  }

  // optional uint32 file_size = 2;
  if (has_file_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->file_size(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FileQueryResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool file_found = 1;
    if (has_file_found()) {
      total_size += 1 + 1;
    }

    // optional uint32 file_size = 2;
    if (has_file_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->file_size());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileQueryResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileQueryResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileQueryResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileQueryResponse::MergeFrom(const FileQueryResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_file_found()) {
      set_file_found(from.file_found());
    }
    if (from.has_file_size()) {
      set_file_size(from.file_size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileQueryResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileQueryResponse::CopyFrom(const FileQueryResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileQueryResponse::IsInitialized() const {

  return true;
}

void FileQueryResponse::Swap(FileQueryResponse* other) {
  if (other != this) {
    std::swap(file_found_, other->file_found_);
    std::swap(file_size_, other->file_size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileQueryResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileQueryResponse_descriptor_;
  metadata.reflection = FileQueryResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JobStart::kPathFieldNumber;
#endif  // !_MSC_VER

JobStart::JobStart()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JobStart::InitAsDefaultInstance() {
}

JobStart::JobStart(const JobStart& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JobStart::SharedCtor() {
  _cached_size_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JobStart::~JobStart() {
  SharedDtor();
}

void JobStart::SharedDtor() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void JobStart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JobStart::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JobStart_descriptor_;
}

const JobStart& JobStart::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_5frsync_5fservice_2eproto();
  return *default_instance_;
}

JobStart* JobStart::default_instance_ = NULL;

JobStart* JobStart::New() const {
  return new JobStart;
}

void JobStart::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JobStart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string path = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JobStart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->path(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JobStart::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JobStart::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string path = 1;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JobStart::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JobStart* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JobStart*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JobStart::MergeFrom(const JobStart& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_path(from.path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JobStart::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JobStart::CopyFrom(const JobStart& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobStart::IsInitialized() const {

  return true;
}

void JobStart::Swap(JobStart* other) {
  if (other != this) {
    std::swap(path_, other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JobStart::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JobStart_descriptor_;
  metadata.reflection = JobStart_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JobStartResponse::kFileFoundFieldNumber;
const int JobStartResponse::kFileSizeFieldNumber;
const int JobStartResponse::kJobIdFieldNumber;
#endif  // !_MSC_VER

JobStartResponse::JobStartResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JobStartResponse::InitAsDefaultInstance() {
}

JobStartResponse::JobStartResponse(const JobStartResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JobStartResponse::SharedCtor() {
  _cached_size_ = 0;
  file_found_ = false;
  file_size_ = 0u;
  job_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JobStartResponse::~JobStartResponse() {
  SharedDtor();
}

void JobStartResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JobStartResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JobStartResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JobStartResponse_descriptor_;
}

const JobStartResponse& JobStartResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_5frsync_5fservice_2eproto();
  return *default_instance_;
}

JobStartResponse* JobStartResponse::default_instance_ = NULL;

JobStartResponse* JobStartResponse::New() const {
  return new JobStartResponse;
}

void JobStartResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    file_found_ = false;
    file_size_ = 0u;
    job_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JobStartResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool file_found = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &file_found_)));
          set_has_file_found();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_file_size;
        break;
      }

      // optional uint32 file_size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_file_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &file_size_)));
          set_has_file_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_job_id;
        break;
      }

      // optional int32 job_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &job_id_)));
          set_has_job_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JobStartResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool file_found = 1;
  if (has_file_found()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->file_found(), output);
  }

  // optional uint32 file_size = 2;
  if (has_file_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->file_size(), output);
  }

  // optional int32 job_id = 3;
  if (has_job_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->job_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JobStartResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool file_found = 1;
  if (has_file_found()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->file_found(), target);
  }

  // optional uint32 file_size = 2;
  if (has_file_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->file_size(), target);
  }

  // optional int32 job_id = 3;
  if (has_job_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->job_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JobStartResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool file_found = 1;
    if (has_file_found()) {
      total_size += 1 + 1;
    }

    // optional uint32 file_size = 2;
    if (has_file_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->file_size());
    }

    // optional int32 job_id = 3;
    if (has_job_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->job_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JobStartResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JobStartResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JobStartResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JobStartResponse::MergeFrom(const JobStartResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_file_found()) {
      set_file_found(from.file_found());
    }
    if (from.has_file_size()) {
      set_file_size(from.file_size());
    }
    if (from.has_job_id()) {
      set_job_id(from.job_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JobStartResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JobStartResponse::CopyFrom(const JobStartResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobStartResponse::IsInitialized() const {

  return true;
}

void JobStartResponse::Swap(JobStartResponse* other) {
  if (other != this) {
    std::swap(file_found_, other->file_found_);
    std::swap(file_size_, other->file_size_);
    std::swap(job_id_, other->job_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JobStartResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JobStartResponse_descriptor_;
  metadata.reflection = JobStartResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc_rsync_service

// @@protoc_insertion_point(global_scope)
