// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc_eterm.proto

#ifndef PROTOBUF_rpc_5feterm_2eproto__INCLUDED
#define PROTOBUF_rpc_5feterm_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace rpc_eterm {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rpc_5feterm_2eproto();
void protobuf_AssignDesc_rpc_5feterm_2eproto();
void protobuf_ShutdownFile_rpc_5feterm_2eproto();

class EmptyParams;
class LedState;
class FingerprintStatus;
class Status;

// ===================================================================

class EmptyParams : public ::google::protobuf::Message {
 public:
  EmptyParams();
  virtual ~EmptyParams();

  EmptyParams(const EmptyParams& from);

  inline EmptyParams& operator=(const EmptyParams& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EmptyParams& default_instance();

  void Swap(EmptyParams* other);

  // implements Message ----------------------------------------------

  EmptyParams* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EmptyParams& from);
  void MergeFrom(const EmptyParams& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:rpc_eterm.EmptyParams)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_rpc_5feterm_2eproto();
  friend void protobuf_AssignDesc_rpc_5feterm_2eproto();
  friend void protobuf_ShutdownFile_rpc_5feterm_2eproto();

  void InitAsDefaultInstance();
  static EmptyParams* default_instance_;
};
// -------------------------------------------------------------------

class LedState : public ::google::protobuf::Message {
 public:
  LedState();
  virtual ~LedState();

  LedState(const LedState& from);

  inline LedState& operator=(const LedState& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LedState& default_instance();

  void Swap(LedState* other);

  // implements Message ----------------------------------------------

  LedState* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LedState& from);
  void MergeFrom(const LedState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool led_on = 1;
  inline bool has_led_on() const;
  inline void clear_led_on();
  static const int kLedOnFieldNumber = 1;
  inline bool led_on() const;
  inline void set_led_on(bool value);

  // optional int32 led_id = 2;
  inline bool has_led_id() const;
  inline void clear_led_id();
  static const int kLedIdFieldNumber = 2;
  inline ::google::protobuf::int32 led_id() const;
  inline void set_led_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:rpc_eterm.LedState)
 private:
  inline void set_has_led_on();
  inline void clear_has_led_on();
  inline void set_has_led_id();
  inline void clear_has_led_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool led_on_;
  ::google::protobuf::int32 led_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_rpc_5feterm_2eproto();
  friend void protobuf_AssignDesc_rpc_5feterm_2eproto();
  friend void protobuf_ShutdownFile_rpc_5feterm_2eproto();

  void InitAsDefaultInstance();
  static LedState* default_instance_;
};
// -------------------------------------------------------------------

class FingerprintStatus : public ::google::protobuf::Message {
 public:
  FingerprintStatus();
  virtual ~FingerprintStatus();

  FingerprintStatus(const FingerprintStatus& from);

  inline FingerprintStatus& operator=(const FingerprintStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FingerprintStatus& default_instance();

  void Swap(FingerprintStatus* other);

  // implements Message ----------------------------------------------

  FingerprintStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FingerprintStatus& from);
  void MergeFrom(const FingerprintStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool finger_pressed = 1;
  inline bool has_finger_pressed() const;
  inline void clear_finger_pressed();
  static const int kFingerPressedFieldNumber = 1;
  inline bool finger_pressed() const;
  inline void set_finger_pressed(bool value);

  // optional int32 num_records = 2;
  inline bool has_num_records() const;
  inline void clear_num_records();
  static const int kNumRecordsFieldNumber = 2;
  inline ::google::protobuf::int32 num_records() const;
  inline void set_num_records(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:rpc_eterm.FingerprintStatus)
 private:
  inline void set_has_finger_pressed();
  inline void clear_has_finger_pressed();
  inline void set_has_num_records();
  inline void clear_has_num_records();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool finger_pressed_;
  ::google::protobuf::int32 num_records_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_rpc_5feterm_2eproto();
  friend void protobuf_AssignDesc_rpc_5feterm_2eproto();
  friend void protobuf_ShutdownFile_rpc_5feterm_2eproto();

  void InitAsDefaultInstance();
  static FingerprintStatus* default_instance_;
};
// -------------------------------------------------------------------

class Status : public ::google::protobuf::Message {
 public:
  Status();
  virtual ~Status();

  Status(const Status& from);

  inline Status& operator=(const Status& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Status& default_instance();

  void Swap(Status* other);

  // implements Message ----------------------------------------------

  Status* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Status& from);
  void MergeFrom(const Status& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool success = 1;
  inline bool has_success() const;
  inline void clear_success();
  static const int kSuccessFieldNumber = 1;
  inline bool success() const;
  inline void set_success(bool value);

  // optional bool is_connected = 2;
  inline bool has_is_connected() const;
  inline void clear_is_connected();
  static const int kIsConnectedFieldNumber = 2;
  inline bool is_connected() const;
  inline void set_is_connected(bool value);

  // optional .rpc_eterm.FingerprintStatus fp_status = 3;
  inline bool has_fp_status() const;
  inline void clear_fp_status();
  static const int kFpStatusFieldNumber = 3;
  inline const ::rpc_eterm::FingerprintStatus& fp_status() const;
  inline ::rpc_eterm::FingerprintStatus* mutable_fp_status();
  inline ::rpc_eterm::FingerprintStatus* release_fp_status();
  inline void set_allocated_fp_status(::rpc_eterm::FingerprintStatus* fp_status);

  // @@protoc_insertion_point(class_scope:rpc_eterm.Status)
 private:
  inline void set_has_success();
  inline void clear_has_success();
  inline void set_has_is_connected();
  inline void clear_has_is_connected();
  inline void set_has_fp_status();
  inline void clear_has_fp_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::rpc_eterm::FingerprintStatus* fp_status_;
  bool success_;
  bool is_connected_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_rpc_5feterm_2eproto();
  friend void protobuf_AssignDesc_rpc_5feterm_2eproto();
  friend void protobuf_ShutdownFile_rpc_5feterm_2eproto();

  void InitAsDefaultInstance();
  static Status* default_instance_;
};
// ===================================================================


// ===================================================================

// EmptyParams

// -------------------------------------------------------------------

// LedState

// optional bool led_on = 1;
inline bool LedState::has_led_on() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LedState::set_has_led_on() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LedState::clear_has_led_on() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LedState::clear_led_on() {
  led_on_ = false;
  clear_has_led_on();
}
inline bool LedState::led_on() const {
  return led_on_;
}
inline void LedState::set_led_on(bool value) {
  set_has_led_on();
  led_on_ = value;
}

// optional int32 led_id = 2;
inline bool LedState::has_led_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LedState::set_has_led_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LedState::clear_has_led_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LedState::clear_led_id() {
  led_id_ = 0;
  clear_has_led_id();
}
inline ::google::protobuf::int32 LedState::led_id() const {
  return led_id_;
}
inline void LedState::set_led_id(::google::protobuf::int32 value) {
  set_has_led_id();
  led_id_ = value;
}

// -------------------------------------------------------------------

// FingerprintStatus

// optional bool finger_pressed = 1;
inline bool FingerprintStatus::has_finger_pressed() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FingerprintStatus::set_has_finger_pressed() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FingerprintStatus::clear_has_finger_pressed() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FingerprintStatus::clear_finger_pressed() {
  finger_pressed_ = false;
  clear_has_finger_pressed();
}
inline bool FingerprintStatus::finger_pressed() const {
  return finger_pressed_;
}
inline void FingerprintStatus::set_finger_pressed(bool value) {
  set_has_finger_pressed();
  finger_pressed_ = value;
}

// optional int32 num_records = 2;
inline bool FingerprintStatus::has_num_records() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FingerprintStatus::set_has_num_records() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FingerprintStatus::clear_has_num_records() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FingerprintStatus::clear_num_records() {
  num_records_ = 0;
  clear_has_num_records();
}
inline ::google::protobuf::int32 FingerprintStatus::num_records() const {
  return num_records_;
}
inline void FingerprintStatus::set_num_records(::google::protobuf::int32 value) {
  set_has_num_records();
  num_records_ = value;
}

// -------------------------------------------------------------------

// Status

// optional bool success = 1;
inline bool Status::has_success() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Status::set_has_success() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Status::clear_has_success() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Status::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool Status::success() const {
  return success_;
}
inline void Status::set_success(bool value) {
  set_has_success();
  success_ = value;
}

// optional bool is_connected = 2;
inline bool Status::has_is_connected() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Status::set_has_is_connected() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Status::clear_has_is_connected() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Status::clear_is_connected() {
  is_connected_ = false;
  clear_has_is_connected();
}
inline bool Status::is_connected() const {
  return is_connected_;
}
inline void Status::set_is_connected(bool value) {
  set_has_is_connected();
  is_connected_ = value;
}

// optional .rpc_eterm.FingerprintStatus fp_status = 3;
inline bool Status::has_fp_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Status::set_has_fp_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Status::clear_has_fp_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Status::clear_fp_status() {
  if (fp_status_ != NULL) fp_status_->::rpc_eterm::FingerprintStatus::Clear();
  clear_has_fp_status();
}
inline const ::rpc_eterm::FingerprintStatus& Status::fp_status() const {
  return fp_status_ != NULL ? *fp_status_ : *default_instance_->fp_status_;
}
inline ::rpc_eterm::FingerprintStatus* Status::mutable_fp_status() {
  set_has_fp_status();
  if (fp_status_ == NULL) fp_status_ = new ::rpc_eterm::FingerprintStatus;
  return fp_status_;
}
inline ::rpc_eterm::FingerprintStatus* Status::release_fp_status() {
  clear_has_fp_status();
  ::rpc_eterm::FingerprintStatus* temp = fp_status_;
  fp_status_ = NULL;
  return temp;
}
inline void Status::set_allocated_fp_status(::rpc_eterm::FingerprintStatus* fp_status) {
  delete fp_status_;
  fp_status_ = fp_status;
  if (fp_status) {
    set_has_fp_status();
  } else {
    clear_has_fp_status();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc_eterm

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rpc_5feterm_2eproto__INCLUDED
