// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc_eterm.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rpc_eterm.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rpc_eterm {

namespace {

const ::google::protobuf::Descriptor* EmptyParams_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EmptyParams_reflection_ = NULL;
const ::google::protobuf::Descriptor* LedState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LedState_reflection_ = NULL;
const ::google::protobuf::Descriptor* FingerprintStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FingerprintStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* Status_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Status_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rpc_5feterm_2eproto() {
  protobuf_AddDesc_rpc_5feterm_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rpc_eterm.proto");
  GOOGLE_CHECK(file != NULL);
  EmptyParams_descriptor_ = file->message_type(0);
  static const int EmptyParams_offsets_[1] = {
  };
  EmptyParams_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EmptyParams_descriptor_,
      EmptyParams::default_instance_,
      EmptyParams_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmptyParams, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmptyParams, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EmptyParams));
  LedState_descriptor_ = file->message_type(1);
  static const int LedState_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LedState, led_on_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LedState, led_id_),
  };
  LedState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LedState_descriptor_,
      LedState::default_instance_,
      LedState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LedState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LedState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LedState));
  FingerprintStatus_descriptor_ = file->message_type(2);
  static const int FingerprintStatus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FingerprintStatus, finger_pressed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FingerprintStatus, num_records_),
  };
  FingerprintStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FingerprintStatus_descriptor_,
      FingerprintStatus::default_instance_,
      FingerprintStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FingerprintStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FingerprintStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FingerprintStatus));
  Status_descriptor_ = file->message_type(3);
  static const int Status_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, is_connected_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, fp_status_),
  };
  Status_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Status_descriptor_,
      Status::default_instance_,
      Status_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Status));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rpc_5feterm_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EmptyParams_descriptor_, &EmptyParams::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LedState_descriptor_, &LedState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FingerprintStatus_descriptor_, &FingerprintStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Status_descriptor_, &Status::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rpc_5feterm_2eproto() {
  delete EmptyParams::default_instance_;
  delete EmptyParams_reflection_;
  delete LedState::default_instance_;
  delete LedState_reflection_;
  delete FingerprintStatus::default_instance_;
  delete FingerprintStatus_reflection_;
  delete Status::default_instance_;
  delete Status_reflection_;
}

void protobuf_AddDesc_rpc_5feterm_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017rpc_eterm.proto\022\trpc_eterm\"\r\n\013EmptyPar"
    "ams\"*\n\010LedState\022\016\n\006led_on\030\001 \001(\010\022\016\n\006led_i"
    "d\030\002 \001(\005\"@\n\021FingerprintStatus\022\026\n\016finger_p"
    "ressed\030\001 \001(\010\022\023\n\013num_records\030\002 \001(\005\"`\n\006Sta"
    "tus\022\017\n\007success\030\001 \001(\010\022\024\n\014is_connected\030\002 \001"
    "(\010\022/\n\tfp_status\030\003 \001(\0132\034.rpc_eterm.Finger"
    "printStatus", 251);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rpc_eterm.proto", &protobuf_RegisterTypes);
  EmptyParams::default_instance_ = new EmptyParams();
  LedState::default_instance_ = new LedState();
  FingerprintStatus::default_instance_ = new FingerprintStatus();
  Status::default_instance_ = new Status();
  EmptyParams::default_instance_->InitAsDefaultInstance();
  LedState::default_instance_->InitAsDefaultInstance();
  FingerprintStatus::default_instance_->InitAsDefaultInstance();
  Status::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rpc_5feterm_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rpc_5feterm_2eproto {
  StaticDescriptorInitializer_rpc_5feterm_2eproto() {
    protobuf_AddDesc_rpc_5feterm_2eproto();
  }
} static_descriptor_initializer_rpc_5feterm_2eproto_;

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

EmptyParams::EmptyParams()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EmptyParams::InitAsDefaultInstance() {
}

EmptyParams::EmptyParams(const EmptyParams& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EmptyParams::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EmptyParams::~EmptyParams() {
  SharedDtor();
}

void EmptyParams::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EmptyParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EmptyParams::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EmptyParams_descriptor_;
}

const EmptyParams& EmptyParams::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_5feterm_2eproto();
  return *default_instance_;
}

EmptyParams* EmptyParams::default_instance_ = NULL;

EmptyParams* EmptyParams::New() const {
  return new EmptyParams;
}

void EmptyParams::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EmptyParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void EmptyParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EmptyParams::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EmptyParams::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EmptyParams::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EmptyParams* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EmptyParams*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EmptyParams::MergeFrom(const EmptyParams& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EmptyParams::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmptyParams::CopyFrom(const EmptyParams& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmptyParams::IsInitialized() const {

  return true;
}

void EmptyParams::Swap(EmptyParams* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EmptyParams::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EmptyParams_descriptor_;
  metadata.reflection = EmptyParams_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LedState::kLedOnFieldNumber;
const int LedState::kLedIdFieldNumber;
#endif  // !_MSC_VER

LedState::LedState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LedState::InitAsDefaultInstance() {
}

LedState::LedState(const LedState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LedState::SharedCtor() {
  _cached_size_ = 0;
  led_on_ = false;
  led_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LedState::~LedState() {
  SharedDtor();
}

void LedState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LedState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LedState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LedState_descriptor_;
}

const LedState& LedState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_5feterm_2eproto();
  return *default_instance_;
}

LedState* LedState::default_instance_ = NULL;

LedState* LedState::New() const {
  return new LedState;
}

void LedState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    led_on_ = false;
    led_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LedState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool led_on = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &led_on_)));
          set_has_led_on();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_led_id;
        break;
      }

      // optional int32 led_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_led_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &led_id_)));
          set_has_led_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LedState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool led_on = 1;
  if (has_led_on()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->led_on(), output);
  }

  // optional int32 led_id = 2;
  if (has_led_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->led_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LedState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool led_on = 1;
  if (has_led_on()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->led_on(), target);
  }

  // optional int32 led_id = 2;
  if (has_led_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->led_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LedState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool led_on = 1;
    if (has_led_on()) {
      total_size += 1 + 1;
    }

    // optional int32 led_id = 2;
    if (has_led_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->led_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LedState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LedState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LedState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LedState::MergeFrom(const LedState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_led_on()) {
      set_led_on(from.led_on());
    }
    if (from.has_led_id()) {
      set_led_id(from.led_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LedState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LedState::CopyFrom(const LedState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LedState::IsInitialized() const {

  return true;
}

void LedState::Swap(LedState* other) {
  if (other != this) {
    std::swap(led_on_, other->led_on_);
    std::swap(led_id_, other->led_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LedState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LedState_descriptor_;
  metadata.reflection = LedState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FingerprintStatus::kFingerPressedFieldNumber;
const int FingerprintStatus::kNumRecordsFieldNumber;
#endif  // !_MSC_VER

FingerprintStatus::FingerprintStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FingerprintStatus::InitAsDefaultInstance() {
}

FingerprintStatus::FingerprintStatus(const FingerprintStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FingerprintStatus::SharedCtor() {
  _cached_size_ = 0;
  finger_pressed_ = false;
  num_records_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FingerprintStatus::~FingerprintStatus() {
  SharedDtor();
}

void FingerprintStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FingerprintStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FingerprintStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FingerprintStatus_descriptor_;
}

const FingerprintStatus& FingerprintStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_5feterm_2eproto();
  return *default_instance_;
}

FingerprintStatus* FingerprintStatus::default_instance_ = NULL;

FingerprintStatus* FingerprintStatus::New() const {
  return new FingerprintStatus;
}

void FingerprintStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    finger_pressed_ = false;
    num_records_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FingerprintStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool finger_pressed = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &finger_pressed_)));
          set_has_finger_pressed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num_records;
        break;
      }

      // optional int32 num_records = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_records:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_records_)));
          set_has_num_records();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FingerprintStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool finger_pressed = 1;
  if (has_finger_pressed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->finger_pressed(), output);
  }

  // optional int32 num_records = 2;
  if (has_num_records()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num_records(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FingerprintStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool finger_pressed = 1;
  if (has_finger_pressed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->finger_pressed(), target);
  }

  // optional int32 num_records = 2;
  if (has_num_records()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num_records(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FingerprintStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool finger_pressed = 1;
    if (has_finger_pressed()) {
      total_size += 1 + 1;
    }

    // optional int32 num_records = 2;
    if (has_num_records()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_records());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FingerprintStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FingerprintStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FingerprintStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FingerprintStatus::MergeFrom(const FingerprintStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_finger_pressed()) {
      set_finger_pressed(from.finger_pressed());
    }
    if (from.has_num_records()) {
      set_num_records(from.num_records());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FingerprintStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FingerprintStatus::CopyFrom(const FingerprintStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FingerprintStatus::IsInitialized() const {

  return true;
}

void FingerprintStatus::Swap(FingerprintStatus* other) {
  if (other != this) {
    std::swap(finger_pressed_, other->finger_pressed_);
    std::swap(num_records_, other->num_records_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FingerprintStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FingerprintStatus_descriptor_;
  metadata.reflection = FingerprintStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Status::kSuccessFieldNumber;
const int Status::kIsConnectedFieldNumber;
const int Status::kFpStatusFieldNumber;
#endif  // !_MSC_VER

Status::Status()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Status::InitAsDefaultInstance() {
  fp_status_ = const_cast< ::rpc_eterm::FingerprintStatus*>(&::rpc_eterm::FingerprintStatus::default_instance());
}

Status::Status(const Status& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Status::SharedCtor() {
  _cached_size_ = 0;
  success_ = false;
  is_connected_ = false;
  fp_status_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Status::~Status() {
  SharedDtor();
}

void Status::SharedDtor() {
  if (this != default_instance_) {
    delete fp_status_;
  }
}

void Status::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Status::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Status_descriptor_;
}

const Status& Status::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_5feterm_2eproto();
  return *default_instance_;
}

Status* Status::default_instance_ = NULL;

Status* Status::New() const {
  return new Status;
}

void Status::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    success_ = false;
    is_connected_ = false;
    if (has_fp_status()) {
      if (fp_status_ != NULL) fp_status_->::rpc_eterm::FingerprintStatus::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Status::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool success = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_connected;
        break;
      }

      // optional bool is_connected = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_connected:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_connected_)));
          set_has_is_connected();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_fp_status;
        break;
      }

      // optional .rpc_eterm.FingerprintStatus fp_status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fp_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fp_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Status::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool success = 1;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  // optional bool is_connected = 2;
  if (has_is_connected()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_connected(), output);
  }

  // optional .rpc_eterm.FingerprintStatus fp_status = 3;
  if (has_fp_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->fp_status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Status::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool success = 1;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  // optional bool is_connected = 2;
  if (has_is_connected()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_connected(), target);
  }

  // optional .rpc_eterm.FingerprintStatus fp_status = 3;
  if (has_fp_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->fp_status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Status::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool success = 1;
    if (has_success()) {
      total_size += 1 + 1;
    }

    // optional bool is_connected = 2;
    if (has_is_connected()) {
      total_size += 1 + 1;
    }

    // optional .rpc_eterm.FingerprintStatus fp_status = 3;
    if (has_fp_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fp_status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Status::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Status* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Status*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Status::MergeFrom(const Status& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_success()) {
      set_success(from.success());
    }
    if (from.has_is_connected()) {
      set_is_connected(from.is_connected());
    }
    if (from.has_fp_status()) {
      mutable_fp_status()->::rpc_eterm::FingerprintStatus::MergeFrom(from.fp_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Status::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Status::CopyFrom(const Status& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Status::IsInitialized() const {

  return true;
}

void Status::Swap(Status* other) {
  if (other != this) {
    std::swap(success_, other->success_);
    std::swap(is_connected_, other->is_connected_);
    std::swap(fp_status_, other->fp_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Status::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Status_descriptor_;
  metadata.reflection = Status_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc_eterm

// @@protoc_insertion_point(global_scope)
