// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: calculator.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "calculator.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rpctest {

namespace {

const ::google::protobuf::Descriptor* CalculatorAddIn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CalculatorAddIn_reflection_ = NULL;
const ::google::protobuf::Descriptor* CalculatorAddOut_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CalculatorAddOut_reflection_ = NULL;
const ::google::protobuf::Descriptor* CalculatorSubIn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CalculatorSubIn_reflection_ = NULL;
const ::google::protobuf::Descriptor* CalculatorSubOut_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CalculatorSubOut_reflection_ = NULL;
const ::google::protobuf::Descriptor* CalculatorMulIn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CalculatorMulIn_reflection_ = NULL;
const ::google::protobuf::Descriptor* CalculatorMulOut_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CalculatorMulOut_reflection_ = NULL;
const ::google::protobuf::Descriptor* CalculatorDivIn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CalculatorDivIn_reflection_ = NULL;
const ::google::protobuf::Descriptor* CalculatorDivOut_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CalculatorDivOut_reflection_ = NULL;
const ::google::protobuf::Descriptor* CalculatorGetNumOpsIn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CalculatorGetNumOpsIn_reflection_ = NULL;
const ::google::protobuf::Descriptor* CalculatorGetNumOpsOut_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CalculatorGetNumOpsOut_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_calculator_2eproto() {
  protobuf_AddDesc_calculator_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "calculator.proto");
  GOOGLE_CHECK(file != NULL);
  CalculatorAddIn_descriptor_ = file->message_type(0);
  static const int CalculatorAddIn_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalculatorAddIn, first_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalculatorAddIn, second_),
  };
  CalculatorAddIn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CalculatorAddIn_descriptor_,
      CalculatorAddIn::default_instance_,
      CalculatorAddIn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalculatorAddIn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalculatorAddIn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CalculatorAddIn));
  CalculatorAddOut_descriptor_ = file->message_type(1);
  static const int CalculatorAddOut_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalculatorAddOut, result_),
  };
  CalculatorAddOut_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CalculatorAddOut_descriptor_,
      CalculatorAddOut::default_instance_,
      CalculatorAddOut_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalculatorAddOut, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalculatorAddOut, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CalculatorAddOut));
  CalculatorSubIn_descriptor_ = file->message_type(2);
  static const int CalculatorSubIn_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalculatorSubIn, first_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalculatorSubIn, second_),
  };
  CalculatorSubIn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CalculatorSubIn_descriptor_,
      CalculatorSubIn::default_instance_,
      CalculatorSubIn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalculatorSubIn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalculatorSubIn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CalculatorSubIn));
  CalculatorSubOut_descriptor_ = file->message_type(3);
  static const int CalculatorSubOut_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalculatorSubOut, result_),
  };
  CalculatorSubOut_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CalculatorSubOut_descriptor_,
      CalculatorSubOut::default_instance_,
      CalculatorSubOut_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalculatorSubOut, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalculatorSubOut, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CalculatorSubOut));
  CalculatorMulIn_descriptor_ = file->message_type(4);
  static const int CalculatorMulIn_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalculatorMulIn, first_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalculatorMulIn, second_),
  };
  CalculatorMulIn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CalculatorMulIn_descriptor_,
      CalculatorMulIn::default_instance_,
      CalculatorMulIn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalculatorMulIn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalculatorMulIn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CalculatorMulIn));
  CalculatorMulOut_descriptor_ = file->message_type(5);
  static const int CalculatorMulOut_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalculatorMulOut, result_),
  };
  CalculatorMulOut_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CalculatorMulOut_descriptor_,
      CalculatorMulOut::default_instance_,
      CalculatorMulOut_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalculatorMulOut, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalculatorMulOut, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CalculatorMulOut));
  CalculatorDivIn_descriptor_ = file->message_type(6);
  static const int CalculatorDivIn_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalculatorDivIn, first_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalculatorDivIn, second_),
  };
  CalculatorDivIn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CalculatorDivIn_descriptor_,
      CalculatorDivIn::default_instance_,
      CalculatorDivIn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalculatorDivIn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalculatorDivIn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CalculatorDivIn));
  CalculatorDivOut_descriptor_ = file->message_type(7);
  static const int CalculatorDivOut_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalculatorDivOut, result_),
  };
  CalculatorDivOut_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CalculatorDivOut_descriptor_,
      CalculatorDivOut::default_instance_,
      CalculatorDivOut_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalculatorDivOut, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalculatorDivOut, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CalculatorDivOut));
  CalculatorGetNumOpsIn_descriptor_ = file->message_type(8);
  static const int CalculatorGetNumOpsIn_offsets_[1] = {
  };
  CalculatorGetNumOpsIn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CalculatorGetNumOpsIn_descriptor_,
      CalculatorGetNumOpsIn::default_instance_,
      CalculatorGetNumOpsIn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalculatorGetNumOpsIn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalculatorGetNumOpsIn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CalculatorGetNumOpsIn));
  CalculatorGetNumOpsOut_descriptor_ = file->message_type(9);
  static const int CalculatorGetNumOpsOut_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalculatorGetNumOpsOut, result_),
  };
  CalculatorGetNumOpsOut_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CalculatorGetNumOpsOut_descriptor_,
      CalculatorGetNumOpsOut::default_instance_,
      CalculatorGetNumOpsOut_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalculatorGetNumOpsOut, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalculatorGetNumOpsOut, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CalculatorGetNumOpsOut));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_calculator_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CalculatorAddIn_descriptor_, &CalculatorAddIn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CalculatorAddOut_descriptor_, &CalculatorAddOut::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CalculatorSubIn_descriptor_, &CalculatorSubIn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CalculatorSubOut_descriptor_, &CalculatorSubOut::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CalculatorMulIn_descriptor_, &CalculatorMulIn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CalculatorMulOut_descriptor_, &CalculatorMulOut::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CalculatorDivIn_descriptor_, &CalculatorDivIn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CalculatorDivOut_descriptor_, &CalculatorDivOut::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CalculatorGetNumOpsIn_descriptor_, &CalculatorGetNumOpsIn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CalculatorGetNumOpsOut_descriptor_, &CalculatorGetNumOpsOut::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_calculator_2eproto() {
  delete CalculatorAddIn::default_instance_;
  delete CalculatorAddIn_reflection_;
  delete CalculatorAddOut::default_instance_;
  delete CalculatorAddOut_reflection_;
  delete CalculatorSubIn::default_instance_;
  delete CalculatorSubIn_reflection_;
  delete CalculatorSubOut::default_instance_;
  delete CalculatorSubOut_reflection_;
  delete CalculatorMulIn::default_instance_;
  delete CalculatorMulIn_reflection_;
  delete CalculatorMulOut::default_instance_;
  delete CalculatorMulOut_reflection_;
  delete CalculatorDivIn::default_instance_;
  delete CalculatorDivIn_reflection_;
  delete CalculatorDivOut::default_instance_;
  delete CalculatorDivOut_reflection_;
  delete CalculatorGetNumOpsIn::default_instance_;
  delete CalculatorGetNumOpsIn_reflection_;
  delete CalculatorGetNumOpsOut::default_instance_;
  delete CalculatorGetNumOpsOut_reflection_;
}

void protobuf_AddDesc_calculator_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020calculator.proto\022\007rpctest\"0\n\017Calculato"
    "rAddIn\022\r\n\005first\030\001 \002(\005\022\016\n\006second\030\002 \002(\005\"\"\n"
    "\020CalculatorAddOut\022\016\n\006result\030\001 \002(\005\"0\n\017Cal"
    "culatorSubIn\022\r\n\005first\030\001 \002(\005\022\016\n\006second\030\002 "
    "\002(\005\"\"\n\020CalculatorSubOut\022\016\n\006result\030\001 \002(\005\""
    "0\n\017CalculatorMulIn\022\r\n\005first\030\001 \002(\005\022\016\n\006sec"
    "ond\030\002 \002(\005\"\"\n\020CalculatorMulOut\022\016\n\006result\030"
    "\001 \002(\005\"0\n\017CalculatorDivIn\022\r\n\005first\030\001 \002(\005\022"
    "\016\n\006second\030\002 \002(\005\"\"\n\020CalculatorDivOut\022\016\n\006r"
    "esult\030\001 \002(\005\"\027\n\025CalculatorGetNumOpsIn\"(\n\026"
    "CalculatorGetNumOpsOut\022\016\n\006result\030\001 \002(\005B\'"
    "\n\023com.example.rpctestB\020CalculatorProtos", 479);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "calculator.proto", &protobuf_RegisterTypes);
  CalculatorAddIn::default_instance_ = new CalculatorAddIn();
  CalculatorAddOut::default_instance_ = new CalculatorAddOut();
  CalculatorSubIn::default_instance_ = new CalculatorSubIn();
  CalculatorSubOut::default_instance_ = new CalculatorSubOut();
  CalculatorMulIn::default_instance_ = new CalculatorMulIn();
  CalculatorMulOut::default_instance_ = new CalculatorMulOut();
  CalculatorDivIn::default_instance_ = new CalculatorDivIn();
  CalculatorDivOut::default_instance_ = new CalculatorDivOut();
  CalculatorGetNumOpsIn::default_instance_ = new CalculatorGetNumOpsIn();
  CalculatorGetNumOpsOut::default_instance_ = new CalculatorGetNumOpsOut();
  CalculatorAddIn::default_instance_->InitAsDefaultInstance();
  CalculatorAddOut::default_instance_->InitAsDefaultInstance();
  CalculatorSubIn::default_instance_->InitAsDefaultInstance();
  CalculatorSubOut::default_instance_->InitAsDefaultInstance();
  CalculatorMulIn::default_instance_->InitAsDefaultInstance();
  CalculatorMulOut::default_instance_->InitAsDefaultInstance();
  CalculatorDivIn::default_instance_->InitAsDefaultInstance();
  CalculatorDivOut::default_instance_->InitAsDefaultInstance();
  CalculatorGetNumOpsIn::default_instance_->InitAsDefaultInstance();
  CalculatorGetNumOpsOut::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_calculator_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_calculator_2eproto {
  StaticDescriptorInitializer_calculator_2eproto() {
    protobuf_AddDesc_calculator_2eproto();
  }
} static_descriptor_initializer_calculator_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CalculatorAddIn::kFirstFieldNumber;
const int CalculatorAddIn::kSecondFieldNumber;
#endif  // !_MSC_VER

CalculatorAddIn::CalculatorAddIn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CalculatorAddIn::InitAsDefaultInstance() {
}

CalculatorAddIn::CalculatorAddIn(const CalculatorAddIn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CalculatorAddIn::SharedCtor() {
  _cached_size_ = 0;
  first_ = 0;
  second_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CalculatorAddIn::~CalculatorAddIn() {
  SharedDtor();
}

void CalculatorAddIn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CalculatorAddIn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CalculatorAddIn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CalculatorAddIn_descriptor_;
}

const CalculatorAddIn& CalculatorAddIn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_calculator_2eproto();
  return *default_instance_;
}

CalculatorAddIn* CalculatorAddIn::default_instance_ = NULL;

CalculatorAddIn* CalculatorAddIn::New() const {
  return new CalculatorAddIn;
}

void CalculatorAddIn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    first_ = 0;
    second_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CalculatorAddIn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 first = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &first_)));
          set_has_first();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_second;
        break;
      }

      // required int32 second = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_second:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &second_)));
          set_has_second();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CalculatorAddIn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 first = 1;
  if (has_first()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->first(), output);
  }

  // required int32 second = 2;
  if (has_second()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->second(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CalculatorAddIn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 first = 1;
  if (has_first()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->first(), target);
  }

  // required int32 second = 2;
  if (has_second()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->second(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CalculatorAddIn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 first = 1;
    if (has_first()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->first());
    }

    // required int32 second = 2;
    if (has_second()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->second());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CalculatorAddIn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CalculatorAddIn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CalculatorAddIn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CalculatorAddIn::MergeFrom(const CalculatorAddIn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_first()) {
      set_first(from.first());
    }
    if (from.has_second()) {
      set_second(from.second());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CalculatorAddIn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CalculatorAddIn::CopyFrom(const CalculatorAddIn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CalculatorAddIn::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CalculatorAddIn::Swap(CalculatorAddIn* other) {
  if (other != this) {
    std::swap(first_, other->first_);
    std::swap(second_, other->second_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CalculatorAddIn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CalculatorAddIn_descriptor_;
  metadata.reflection = CalculatorAddIn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CalculatorAddOut::kResultFieldNumber;
#endif  // !_MSC_VER

CalculatorAddOut::CalculatorAddOut()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CalculatorAddOut::InitAsDefaultInstance() {
}

CalculatorAddOut::CalculatorAddOut(const CalculatorAddOut& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CalculatorAddOut::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CalculatorAddOut::~CalculatorAddOut() {
  SharedDtor();
}

void CalculatorAddOut::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CalculatorAddOut::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CalculatorAddOut::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CalculatorAddOut_descriptor_;
}

const CalculatorAddOut& CalculatorAddOut::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_calculator_2eproto();
  return *default_instance_;
}

CalculatorAddOut* CalculatorAddOut::default_instance_ = NULL;

CalculatorAddOut* CalculatorAddOut::New() const {
  return new CalculatorAddOut;
}

void CalculatorAddOut::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CalculatorAddOut::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CalculatorAddOut::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CalculatorAddOut::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CalculatorAddOut::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CalculatorAddOut::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CalculatorAddOut* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CalculatorAddOut*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CalculatorAddOut::MergeFrom(const CalculatorAddOut& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CalculatorAddOut::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CalculatorAddOut::CopyFrom(const CalculatorAddOut& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CalculatorAddOut::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CalculatorAddOut::Swap(CalculatorAddOut* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CalculatorAddOut::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CalculatorAddOut_descriptor_;
  metadata.reflection = CalculatorAddOut_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CalculatorSubIn::kFirstFieldNumber;
const int CalculatorSubIn::kSecondFieldNumber;
#endif  // !_MSC_VER

CalculatorSubIn::CalculatorSubIn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CalculatorSubIn::InitAsDefaultInstance() {
}

CalculatorSubIn::CalculatorSubIn(const CalculatorSubIn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CalculatorSubIn::SharedCtor() {
  _cached_size_ = 0;
  first_ = 0;
  second_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CalculatorSubIn::~CalculatorSubIn() {
  SharedDtor();
}

void CalculatorSubIn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CalculatorSubIn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CalculatorSubIn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CalculatorSubIn_descriptor_;
}

const CalculatorSubIn& CalculatorSubIn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_calculator_2eproto();
  return *default_instance_;
}

CalculatorSubIn* CalculatorSubIn::default_instance_ = NULL;

CalculatorSubIn* CalculatorSubIn::New() const {
  return new CalculatorSubIn;
}

void CalculatorSubIn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    first_ = 0;
    second_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CalculatorSubIn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 first = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &first_)));
          set_has_first();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_second;
        break;
      }

      // required int32 second = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_second:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &second_)));
          set_has_second();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CalculatorSubIn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 first = 1;
  if (has_first()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->first(), output);
  }

  // required int32 second = 2;
  if (has_second()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->second(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CalculatorSubIn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 first = 1;
  if (has_first()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->first(), target);
  }

  // required int32 second = 2;
  if (has_second()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->second(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CalculatorSubIn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 first = 1;
    if (has_first()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->first());
    }

    // required int32 second = 2;
    if (has_second()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->second());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CalculatorSubIn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CalculatorSubIn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CalculatorSubIn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CalculatorSubIn::MergeFrom(const CalculatorSubIn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_first()) {
      set_first(from.first());
    }
    if (from.has_second()) {
      set_second(from.second());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CalculatorSubIn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CalculatorSubIn::CopyFrom(const CalculatorSubIn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CalculatorSubIn::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CalculatorSubIn::Swap(CalculatorSubIn* other) {
  if (other != this) {
    std::swap(first_, other->first_);
    std::swap(second_, other->second_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CalculatorSubIn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CalculatorSubIn_descriptor_;
  metadata.reflection = CalculatorSubIn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CalculatorSubOut::kResultFieldNumber;
#endif  // !_MSC_VER

CalculatorSubOut::CalculatorSubOut()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CalculatorSubOut::InitAsDefaultInstance() {
}

CalculatorSubOut::CalculatorSubOut(const CalculatorSubOut& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CalculatorSubOut::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CalculatorSubOut::~CalculatorSubOut() {
  SharedDtor();
}

void CalculatorSubOut::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CalculatorSubOut::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CalculatorSubOut::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CalculatorSubOut_descriptor_;
}

const CalculatorSubOut& CalculatorSubOut::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_calculator_2eproto();
  return *default_instance_;
}

CalculatorSubOut* CalculatorSubOut::default_instance_ = NULL;

CalculatorSubOut* CalculatorSubOut::New() const {
  return new CalculatorSubOut;
}

void CalculatorSubOut::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CalculatorSubOut::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CalculatorSubOut::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CalculatorSubOut::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CalculatorSubOut::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CalculatorSubOut::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CalculatorSubOut* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CalculatorSubOut*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CalculatorSubOut::MergeFrom(const CalculatorSubOut& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CalculatorSubOut::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CalculatorSubOut::CopyFrom(const CalculatorSubOut& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CalculatorSubOut::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CalculatorSubOut::Swap(CalculatorSubOut* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CalculatorSubOut::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CalculatorSubOut_descriptor_;
  metadata.reflection = CalculatorSubOut_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CalculatorMulIn::kFirstFieldNumber;
const int CalculatorMulIn::kSecondFieldNumber;
#endif  // !_MSC_VER

CalculatorMulIn::CalculatorMulIn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CalculatorMulIn::InitAsDefaultInstance() {
}

CalculatorMulIn::CalculatorMulIn(const CalculatorMulIn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CalculatorMulIn::SharedCtor() {
  _cached_size_ = 0;
  first_ = 0;
  second_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CalculatorMulIn::~CalculatorMulIn() {
  SharedDtor();
}

void CalculatorMulIn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CalculatorMulIn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CalculatorMulIn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CalculatorMulIn_descriptor_;
}

const CalculatorMulIn& CalculatorMulIn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_calculator_2eproto();
  return *default_instance_;
}

CalculatorMulIn* CalculatorMulIn::default_instance_ = NULL;

CalculatorMulIn* CalculatorMulIn::New() const {
  return new CalculatorMulIn;
}

void CalculatorMulIn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    first_ = 0;
    second_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CalculatorMulIn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 first = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &first_)));
          set_has_first();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_second;
        break;
      }

      // required int32 second = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_second:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &second_)));
          set_has_second();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CalculatorMulIn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 first = 1;
  if (has_first()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->first(), output);
  }

  // required int32 second = 2;
  if (has_second()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->second(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CalculatorMulIn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 first = 1;
  if (has_first()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->first(), target);
  }

  // required int32 second = 2;
  if (has_second()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->second(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CalculatorMulIn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 first = 1;
    if (has_first()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->first());
    }

    // required int32 second = 2;
    if (has_second()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->second());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CalculatorMulIn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CalculatorMulIn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CalculatorMulIn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CalculatorMulIn::MergeFrom(const CalculatorMulIn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_first()) {
      set_first(from.first());
    }
    if (from.has_second()) {
      set_second(from.second());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CalculatorMulIn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CalculatorMulIn::CopyFrom(const CalculatorMulIn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CalculatorMulIn::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CalculatorMulIn::Swap(CalculatorMulIn* other) {
  if (other != this) {
    std::swap(first_, other->first_);
    std::swap(second_, other->second_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CalculatorMulIn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CalculatorMulIn_descriptor_;
  metadata.reflection = CalculatorMulIn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CalculatorMulOut::kResultFieldNumber;
#endif  // !_MSC_VER

CalculatorMulOut::CalculatorMulOut()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CalculatorMulOut::InitAsDefaultInstance() {
}

CalculatorMulOut::CalculatorMulOut(const CalculatorMulOut& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CalculatorMulOut::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CalculatorMulOut::~CalculatorMulOut() {
  SharedDtor();
}

void CalculatorMulOut::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CalculatorMulOut::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CalculatorMulOut::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CalculatorMulOut_descriptor_;
}

const CalculatorMulOut& CalculatorMulOut::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_calculator_2eproto();
  return *default_instance_;
}

CalculatorMulOut* CalculatorMulOut::default_instance_ = NULL;

CalculatorMulOut* CalculatorMulOut::New() const {
  return new CalculatorMulOut;
}

void CalculatorMulOut::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CalculatorMulOut::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CalculatorMulOut::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CalculatorMulOut::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CalculatorMulOut::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CalculatorMulOut::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CalculatorMulOut* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CalculatorMulOut*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CalculatorMulOut::MergeFrom(const CalculatorMulOut& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CalculatorMulOut::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CalculatorMulOut::CopyFrom(const CalculatorMulOut& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CalculatorMulOut::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CalculatorMulOut::Swap(CalculatorMulOut* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CalculatorMulOut::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CalculatorMulOut_descriptor_;
  metadata.reflection = CalculatorMulOut_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CalculatorDivIn::kFirstFieldNumber;
const int CalculatorDivIn::kSecondFieldNumber;
#endif  // !_MSC_VER

CalculatorDivIn::CalculatorDivIn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CalculatorDivIn::InitAsDefaultInstance() {
}

CalculatorDivIn::CalculatorDivIn(const CalculatorDivIn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CalculatorDivIn::SharedCtor() {
  _cached_size_ = 0;
  first_ = 0;
  second_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CalculatorDivIn::~CalculatorDivIn() {
  SharedDtor();
}

void CalculatorDivIn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CalculatorDivIn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CalculatorDivIn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CalculatorDivIn_descriptor_;
}

const CalculatorDivIn& CalculatorDivIn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_calculator_2eproto();
  return *default_instance_;
}

CalculatorDivIn* CalculatorDivIn::default_instance_ = NULL;

CalculatorDivIn* CalculatorDivIn::New() const {
  return new CalculatorDivIn;
}

void CalculatorDivIn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    first_ = 0;
    second_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CalculatorDivIn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 first = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &first_)));
          set_has_first();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_second;
        break;
      }

      // required int32 second = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_second:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &second_)));
          set_has_second();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CalculatorDivIn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 first = 1;
  if (has_first()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->first(), output);
  }

  // required int32 second = 2;
  if (has_second()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->second(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CalculatorDivIn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 first = 1;
  if (has_first()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->first(), target);
  }

  // required int32 second = 2;
  if (has_second()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->second(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CalculatorDivIn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 first = 1;
    if (has_first()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->first());
    }

    // required int32 second = 2;
    if (has_second()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->second());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CalculatorDivIn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CalculatorDivIn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CalculatorDivIn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CalculatorDivIn::MergeFrom(const CalculatorDivIn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_first()) {
      set_first(from.first());
    }
    if (from.has_second()) {
      set_second(from.second());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CalculatorDivIn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CalculatorDivIn::CopyFrom(const CalculatorDivIn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CalculatorDivIn::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CalculatorDivIn::Swap(CalculatorDivIn* other) {
  if (other != this) {
    std::swap(first_, other->first_);
    std::swap(second_, other->second_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CalculatorDivIn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CalculatorDivIn_descriptor_;
  metadata.reflection = CalculatorDivIn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CalculatorDivOut::kResultFieldNumber;
#endif  // !_MSC_VER

CalculatorDivOut::CalculatorDivOut()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CalculatorDivOut::InitAsDefaultInstance() {
}

CalculatorDivOut::CalculatorDivOut(const CalculatorDivOut& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CalculatorDivOut::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CalculatorDivOut::~CalculatorDivOut() {
  SharedDtor();
}

void CalculatorDivOut::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CalculatorDivOut::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CalculatorDivOut::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CalculatorDivOut_descriptor_;
}

const CalculatorDivOut& CalculatorDivOut::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_calculator_2eproto();
  return *default_instance_;
}

CalculatorDivOut* CalculatorDivOut::default_instance_ = NULL;

CalculatorDivOut* CalculatorDivOut::New() const {
  return new CalculatorDivOut;
}

void CalculatorDivOut::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CalculatorDivOut::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CalculatorDivOut::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CalculatorDivOut::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CalculatorDivOut::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CalculatorDivOut::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CalculatorDivOut* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CalculatorDivOut*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CalculatorDivOut::MergeFrom(const CalculatorDivOut& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CalculatorDivOut::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CalculatorDivOut::CopyFrom(const CalculatorDivOut& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CalculatorDivOut::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CalculatorDivOut::Swap(CalculatorDivOut* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CalculatorDivOut::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CalculatorDivOut_descriptor_;
  metadata.reflection = CalculatorDivOut_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CalculatorGetNumOpsIn::CalculatorGetNumOpsIn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CalculatorGetNumOpsIn::InitAsDefaultInstance() {
}

CalculatorGetNumOpsIn::CalculatorGetNumOpsIn(const CalculatorGetNumOpsIn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CalculatorGetNumOpsIn::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CalculatorGetNumOpsIn::~CalculatorGetNumOpsIn() {
  SharedDtor();
}

void CalculatorGetNumOpsIn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CalculatorGetNumOpsIn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CalculatorGetNumOpsIn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CalculatorGetNumOpsIn_descriptor_;
}

const CalculatorGetNumOpsIn& CalculatorGetNumOpsIn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_calculator_2eproto();
  return *default_instance_;
}

CalculatorGetNumOpsIn* CalculatorGetNumOpsIn::default_instance_ = NULL;

CalculatorGetNumOpsIn* CalculatorGetNumOpsIn::New() const {
  return new CalculatorGetNumOpsIn;
}

void CalculatorGetNumOpsIn::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CalculatorGetNumOpsIn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CalculatorGetNumOpsIn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CalculatorGetNumOpsIn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CalculatorGetNumOpsIn::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CalculatorGetNumOpsIn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CalculatorGetNumOpsIn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CalculatorGetNumOpsIn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CalculatorGetNumOpsIn::MergeFrom(const CalculatorGetNumOpsIn& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CalculatorGetNumOpsIn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CalculatorGetNumOpsIn::CopyFrom(const CalculatorGetNumOpsIn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CalculatorGetNumOpsIn::IsInitialized() const {

  return true;
}

void CalculatorGetNumOpsIn::Swap(CalculatorGetNumOpsIn* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CalculatorGetNumOpsIn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CalculatorGetNumOpsIn_descriptor_;
  metadata.reflection = CalculatorGetNumOpsIn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CalculatorGetNumOpsOut::kResultFieldNumber;
#endif  // !_MSC_VER

CalculatorGetNumOpsOut::CalculatorGetNumOpsOut()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CalculatorGetNumOpsOut::InitAsDefaultInstance() {
}

CalculatorGetNumOpsOut::CalculatorGetNumOpsOut(const CalculatorGetNumOpsOut& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CalculatorGetNumOpsOut::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CalculatorGetNumOpsOut::~CalculatorGetNumOpsOut() {
  SharedDtor();
}

void CalculatorGetNumOpsOut::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CalculatorGetNumOpsOut::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CalculatorGetNumOpsOut::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CalculatorGetNumOpsOut_descriptor_;
}

const CalculatorGetNumOpsOut& CalculatorGetNumOpsOut::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_calculator_2eproto();
  return *default_instance_;
}

CalculatorGetNumOpsOut* CalculatorGetNumOpsOut::default_instance_ = NULL;

CalculatorGetNumOpsOut* CalculatorGetNumOpsOut::New() const {
  return new CalculatorGetNumOpsOut;
}

void CalculatorGetNumOpsOut::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CalculatorGetNumOpsOut::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CalculatorGetNumOpsOut::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CalculatorGetNumOpsOut::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CalculatorGetNumOpsOut::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CalculatorGetNumOpsOut::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CalculatorGetNumOpsOut* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CalculatorGetNumOpsOut*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CalculatorGetNumOpsOut::MergeFrom(const CalculatorGetNumOpsOut& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CalculatorGetNumOpsOut::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CalculatorGetNumOpsOut::CopyFrom(const CalculatorGetNumOpsOut& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CalculatorGetNumOpsOut::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CalculatorGetNumOpsOut::Swap(CalculatorGetNumOpsOut* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CalculatorGetNumOpsOut::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CalculatorGetNumOpsOut_descriptor_;
  metadata.reflection = CalculatorGetNumOpsOut_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace rpctest

// @@protoc_insertion_point(global_scope)
