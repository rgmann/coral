#ifndef RSYNC_SEGMENT_ACCESSOR_H
#define RSYNC_SEGMENT_ACCESSOR_H

#include "Segment.h"

namespace liber {
namespace rsync {

// Segment retrieval interface expected by the Assembler.
// TODO: More accurate name than "vector"?
// The Assembler does not require a Hash like the Authority because the
// intruction list, generated by the Authority, already provides exact
// SegmentIDs (which are simply linear indeces into the list of Segments).
// 
// Something to investigate: Indeces will only increase.  The Assembler
// will never seek backwards.  Therefore, FS access may make efficient use
// of spacial locality.  Is there any additional read-ahead caching that can
// make this even more efficient (keeping in mind that the Assembler may skip
// segments if a chunk instruction is received)?
//
class SegmentAccessor {
public:

  SegmentAccessor();
  virtual ~SegmentAccessor();

  virtual Segment* getSegment(liber::rsync::Segment::ID id) = 0;

private:

  SegmentAccessor(const SegmentAccessor&);
  SegmentAccessor& operator= (const SegmentAccessor&);
};


} // End namespace rsync
} // End namespace liber


#endif // RSYNC_SEGMENT_ACCESSOR_H
