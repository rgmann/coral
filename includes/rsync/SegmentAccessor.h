// 
// Copyright (c) 2015, Robert Glissmann
// All rights reserved.
// 
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
// 
// * Redistributions of source code must retain the above copyright notice, this
// list of conditions and the following disclaimer.
// 
// * Redistributions in binary form must reproduce the above copyright notice,
// this list of conditions and the following disclaimer in the documentation
// and/or other materials provided with the distribution.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// 

// %% license-end-token %%
// 
// Author: Robert.Glissmann@gmail.com (Robert Glissmann)
// 
// 



#ifndef RSYNC_SEGMENT_ACCESSOR_H
#define RSYNC_SEGMENT_ACCESSOR_H

#include "Segment.h"

namespace liber {
namespace rsync {

// Segment retrieval interface expected by the Assembler.
// TODO: More accurate name than "vector"?
// The Assembler does not require a Hash like the Authority because the
// intruction list, generated by the Authority, already provides exact
// SegmentIDs (which are simply linear indeces into the list of Segments).
// 
// Something to investigate: Indeces will only increase.  The Assembler
// will never seek backwards.  Therefore, FS access may make efficient use
// of spacial locality.  Is there any additional read-ahead caching that can
// make this even more efficient (keeping in mind that the Assembler may skip
// segments if a chunk instruction is received)?
//
class SegmentAccessor {
public:

  SegmentAccessor();
  virtual ~SegmentAccessor();

  virtual Segment* getSegment(liber::rsync::Segment::ID id) = 0;

private:

  SegmentAccessor(const SegmentAccessor&);
  SegmentAccessor& operator= (const SegmentAccessor&);
};


} // End namespace rsync
} // End namespace liber


#endif // RSYNC_SEGMENT_ACCESSOR_H
